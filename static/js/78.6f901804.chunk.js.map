{"version":3,"file":"static/js/78.6f901804.chunk.js","mappings":"kcACA,EAA4B,uCAA5B,EAAsF,8CAAtF,EAAuJ,8CAAvJ,EAAuN,6CAAvN,EAAqR,4CAArR,EAAyU,mCAAzU,EAAoX,mCAApX,EAAga,oCAAha,EAAid,wCAAjd,EAA4gB,8CAA5gB,EAAmkB,oCAAnkB,EAA61B,2CAA71B,EAAs5B,yCAAt5B,EAAq9B,iDAAr9B,EAA0hC,+C,SCiClhCA,EAAgBC,EAAAA,EAAAA,MAATC,EAASD,EAAAA,EAAAA,KAChBE,EAAYC,EAAAA,EAAAA,QA+ZpB,EA7Z4B,WAC1B,OAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA8CF,EAAAA,EAAAA,UAAS,IAAvD,eAAOG,EAAP,KAAwBC,EAAxB,KACA,GAAsCJ,EAAAA,EAAAA,UAAS,IAA/C,gBAAOK,GAAP,MAAoBC,GAApB,MACA,IAAkDN,EAAAA,EAAAA,UAAS,IAA3D,iBAAOO,GAAP,MAA0BC,GAA1B,MACA,IAAwCR,EAAAA,EAAAA,UAAS,IAAjD,iBAAOS,GAAP,MAAqBC,GAArB,MACA,IAA0BV,EAAAA,EAAAA,UAAS,MAAnC,iBAAOW,GAAP,MAAcC,GAAd,MAEMC,IAAoBC,EAAAA,EAAAA,GAAc,sBAExC,GAAeC,EAAAA,EAAAA,UAARC,IAAP,gBACQC,IAAaC,EAAAA,EAAAA,KAAbD,SAER,IAAoCE,EAAAA,EAAAA,MAApC,iBAAOC,GAAP,MAAqBC,GAArB,MAAqBA,UAEfC,GAAiB,mCAAG,WAAOC,GAAP,wFACNC,EAAAA,EAAAA,GAAUD,EAAMtB,MADV,OAClBwB,EADkB,OAExBvB,EAAQuB,GACRb,GAASW,EAAMtB,MAHS,2CAAH,sDAMjByB,GAAQ,mCAAG,WAAOC,GAAP,wFACTC,EAA6B,GAAjBD,EAAKE,KAAKC,KAAYH,EAAKE,KAAKE,IAC5CC,EAAqB3B,GAAY4B,KAAK,KAAKC,QAAQ,KAAM,MACzDC,EAAsB1B,GAAawB,KAAK,KAAKC,QAAQ,KAAM,OAE3DE,EAAO,IAAIC,UAEZC,OAAO,kBAAmB,eAC/BF,EAAKE,OAAO,OAAQ,eAEpBC,OAAOC,KAAKb,GAAMc,SAAQ,SAACC,GACzBN,EAAKE,OAAOI,EAAKf,EAAKe,IACtBN,EAAKO,IAAI,iBAAkBf,GAC3BQ,EAAKO,IAAI,QAAShC,IAClByB,EAAKO,IAAI,cAAeX,GACxBI,EAAKO,IAAI,eAAgBR,MAG3BS,EAAAA,GAAAA,QAAgB,gBAlBD,UAoBOxB,GAAWgB,GAAMS,SApBxB,wBAoBPpB,EApBO,EAoBPA,IApBO,WAsBTqB,EAAAA,EAAAA,KAAOC,EAAAA,EAAAA,IAAWC,EAAAA,EAAa,SAAU,CAC7CC,MAAOtB,EAAKsB,MACZxB,IAAAA,EACAyB,MAAO,EACPC,MAAO,GACPC,OAAQ,CACNC,GAAIpC,GAASqC,IACbC,KAAMtC,GAASuC,YACfC,OAAQxC,GAASyC,YA9BN,QAkCf1C,GAAK2C,cACLrD,GAAe,IACfI,GAAgB,IAChBR,EAAQ,MAER0C,EAAAA,GAAAA,QAAgB,gBAvCD,4CAAH,sDA4Ed,OACE,iBAAKgB,UAAWC,EAAhB,WACE,SAAClE,EAAD,CAAOiE,UAAWC,EAAwBC,MAAO,EAAjD,qCAGA,UAAC,IAAD,CACEF,UAAWC,EACXE,OAAO,WACPrC,SAAUA,GACVsC,mBAAoB,CAClBC,SAAU,SACVC,WAAY,SACZC,MAAO,SACPC,OAAQ,UAEVpD,KAAMA,GACNqD,cAAe,CACbxC,KAAM,CACJC,KAAM,EACNC,IAAK,GAEPuC,SAAU,EACVC,UAAW,QAjBf,WAoBE,SAAC,SAAD,CACEhB,KAAK,QACLiB,MAAO,CACL,CACEC,UAAU,EACVC,gBAAiB,WACjB9B,QAAS,wCAEX,CACE6B,UAAU,EACV7B,QAAS,oCACT+B,QAAS,qBAEX,CACEF,UAAU,EACV7B,QAAS,2BACTgC,YAAY,IAGhBC,WAAY,CACVC,KAAM,IApBV,UAuBE,SAAC,IAAD,CACEC,KAAK,OACLnB,UAAWoB,GAAAA,CAAGnB,EAAwBA,GACtCoB,YAAY,wBACZC,aAAa,WAIjB,UAAC,IAAD,CAAKC,OAAQ,GAAb,WACE,UAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,GAAjB,WACE,SAAC,SAAD,CACE9B,KAAK,cACL+B,OAAO,iBAAM1B,UAAWC,EAAjB,yBACPW,MAAO,CACL,CACEC,UAAU,EACVC,gBAAiB,WACjBa,UAAU,WAAD,wBAAE,iFACJlF,GAAYmF,OADR,yCAEAC,QAAQC,OACb,IAAIC,MAAM,oCAHL,2CAAF,kDAAC,IAQZ,CACEjB,gBAAiB,WACjBa,UAAU,WAAD,wBAAE,kFACLlF,GAAYuF,SAASzF,EAAgB0F,QADhC,yCAEAJ,QAAQC,OACb,IAAIC,MAAM,yCAHL,2CAAF,kDAAC,KASdd,WAAY,CACVC,KAAM,IA3BV,UA8BE,SAAC,IAAD,CACEgB,SAAiC,IAAvBzF,GAAYmF,OACtBP,YAAY,cACZc,KAAK,QACLnC,UAAWC,EACXqB,aAAa,MACbc,QAAQ,SAACC,EAAA,EAAD,CAAoBC,QAhId,WAEvB,OAAC/F,QAAD,IAACA,GAAAA,EAAiB0F,SAClBxF,GAAYuF,SAASzF,EAAgB0F,UAEtCvF,GAAe,GAAD,eAAKD,IAAL,CAAkBF,KAChCC,EAAmB,IACnBY,GAAK2C,YAAY,CAAC,oBA0HRwC,MAAOhG,EACPiG,SAAU,SAACC,GAAD,OAAOjG,EAAmBiG,EAAEC,OAAOH,aAGjD,gBAAKvC,UAAWC,EAAhB,UACE,SAAC,IAAD,CAAO0C,MAAI,EAAX,SACGlG,GAAYmG,KAAI,SAACC,GAAD,OACf,SAAC,IAAD,CAEEC,UAAQ,EACRC,QAAS,kBArHE,SAACC,GAC5B,IAAMC,EAAUxG,GAAYyG,QAAO,SAACC,GAAD,OAASA,IAAQH,KACpDtG,GAAeuG,GAmHgBG,CAAqBP,IAHtC,SAKGA,GAJIA,cAWf,UAAC,IAAD,CAAKrB,GAAI,GAAIC,GAAI,GAAjB,WACE,SAAC,SAAD,CACE9B,KAAK,eACLkB,UAAQ,EACRa,OAAO,iBAAM1B,UAAWC,EAAjB,0BACPW,MAAO,CACL,CACEE,gBAAiB,WACjBa,UAAU,WAAD,wBAAE,iFACJ9E,GAAa+E,OADT,yCAEAC,QAAQC,OACb,IAAIC,MAAM,qCAHL,2CAAF,kDAAC,IAQZ,CACEjB,gBAAiB,WACjBa,UAAU,WAAD,wBAAE,kFACL9E,GAAamF,SAASrF,GAAkBsF,QADnC,yCAEAJ,QAAQC,OACb,IAAIC,MAAM,0CAHL,2CAAF,kDAAC,KASdd,WAAY,CACVC,KAAM,IA3BV,UA8BE,SAAC,aAAD,CACEgB,SAAkC,IAAxBrF,GAAa+E,OACvByB,WAAS,EACTrD,UAAWC,EACXqD,UAAW,IACXjC,YAAY,2BACZc,KAAK,QACLb,aAAa,MACbiB,MAAO5F,GACP6F,SAAU,SAACC,GAAD,OAAO7F,GAAqB6F,EAAEC,OAAOH,aAGnD,SAAC,IAAD,CAAKgB,QAAQ,MAAb,UACE,SAAC,IAAD,CACErB,SACEvF,GAAkBiF,OAAS,GACH,IAAxB/E,GAAa+E,SACZjF,GAAkBsF,OAErBE,KAAMlF,GAAoB,SAAW,QACrC+C,UAAWC,EACXqC,QA7Le,WAExB,OAAC3F,SAAD,IAACA,IAAAA,GAAmBsF,SACpBpF,GAAamF,SAASrF,GAAkBsF,UAEzCnF,GAAgB,GAAD,eAAKD,IAAL,CAAmBF,MAClCC,GAAqB,IACrBQ,GAAK2C,YAAY,CAAC,mBA8KV,mBAaDlD,GAAa+F,KAAI,SAACC,EAAMW,GAAP,OAChB,UAACvH,EAAD,CAAiB+D,UAAWC,EAA5B,WACE,kBAAMD,UAAWC,EAAjB,WACE,SAACwD,EAAA,EAAD,CACEzD,UAAWC,EACXqC,QAAS,kBAvLD,SAACoB,GACzB,IAAMC,EAAkB9G,GAAaqG,QACnC,SAACU,GAAD,OAAiBA,IAAgBF,KAEnC5G,GAAgB6G,GAmLeE,CAAkBhB,MAHrC,QAKQW,EAAQ,EALhB,IAKoB,OAEnBX,IARQA,aAcjB,UAAC,IAAD,CAAKiB,MAAM,SAASP,QAAQ,gBAAgBhC,OAAQ,GAApD,WACE,SAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,GAAjB,UACE,SAAC,SAAD,CACE9B,KAAK,OACL+B,OAAO,iBAAM1B,UAAWC,EAAjB,gCACPW,MAAO,CACL,CACEC,UAAU,EACVC,gBAAiB,WACjBa,UAAU,WAAD,wBAAE,WAAOoC,EAAGxB,GAAV,oEACU,IAAfA,EAAMrE,MAA4B,IAAdqE,EAAMpE,IADrB,yCAEA0D,QAAQC,OACb,IAAIC,MAAM,8BAHL,2CAAF,qDAAC,KAPhB,UAiBE,SAACiC,EAAA,EAAD,SAIJ,SAAC,IAAD,CAAKxC,GAAI,GAAIC,GAAI,GAAjB,UACE,SAAC,SAAD,CACE9B,KAAK,WACL+B,OAAO,iBAAM1B,UAAWC,EAAjB,sBACPW,MAAO,CACL,CACEC,UAAU,EACV7B,QAAS,sCANf,UAUE,SAAC,IAAD,CACEgB,UAAWoB,GAAAA,CAAGnB,EAAsBA,GACpCkB,KAAK,SACLgB,KAAK,QACLhE,IAAK,EACL8F,IAAK,GACL5C,YAAY,oBACZC,aAAa,gBAMrB,SAAC,SAAD,CACE3B,KAAK,QACLuE,cAAc,WACdxC,OACE,iBAAM1B,UAAWC,EAAjB,wCAEFW,MAAO,CACL,CACEC,UAAU,EACV7B,QAAS,0BATf,UAaE,SAAC9C,EAAD,CACEyD,KAAK,OACLK,UAAWoB,GAAAA,CAAGnB,GAAD,UACVA,EAAsB5D,IAEzB8H,aAAc,kBAAM,GACpBC,gBAAgB,EAChBC,OAAO,kBACP7B,SAAU9E,GACVwE,SAAUzE,GATZ,UAWE,SAAC6G,EAAA,EAAD,CAAcC,cAAelI,SAIjC,UAAC,IAAD,CAAKkF,OAAQ,GAAb,WACE,SAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,GAAjB,UACE,SAAC,SAAD,CACE9B,KAAK,SACL+B,OAAO,iBAAM1B,UAAWC,EAAjB,oBACPW,MAAO,CACL,CACEC,UAAU,EACV7B,QAAS,8BANf,UAUE,SAAC,IAAD,CACEqC,YAAY,qBACZc,KAAK,QACLb,aAAa,MACbtB,UAAWC,SAKjB,SAAC,IAAD,CAAKuB,GAAI,GAAIC,GAAI,GAAjB,UACE,SAAC,SAAD,CACE9B,KAAK,YACL+B,OAAO,iBAAM1B,UAAWC,EAAjB,wBAFT,UAIE,SAAC,IAAD,CACED,UAAWC,EACXkB,KAAK,QACLE,YAAY,yBACZc,KAAK,QACLb,aAAa,gBAMrB,SAAC,IAAD,CAAKiC,QAAQ,SAAb,UACE,SAAC,SAAD,WACE,SAAC,IAAD,CACEpC,KAAK,UACLqD,SAAS,SACTtC,SAAUzE,GACV0E,KAAK,QACLnC,UAAWC,EALb,8B,uGChYZ,IA3CqB,SAAC,GAAwD,IAAtDsE,EAAqD,EAArDA,cAAeE,EAAsC,EAAtCA,gBAAiBC,EAAqB,EAArBA,eACtD,OAAIH,GAEA,iBAAKvE,UAAWC,EAAAA,EAAAA,QAAhB,WACE,SAAC,IAAD,CACED,UAAWoB,GAAAA,CAAGnB,EAAAA,EAAAA,gBAAD,UACVA,EAAAA,EAAAA,aAAqBwE,IAExBE,SAAS,EACTC,IAAKL,IAENE,IACC,gBAAKzE,UAAWC,EAAAA,EAAAA,kBAAhB,UACE,SAAC,IAAD,CACEkB,KAAK,SACL0D,QAASH,EACTI,YAAa,eAIjBL,IACA,iBAAKzE,UAAWC,EAAAA,EAAAA,cAAhB,WACE,cAAGD,UAAWC,EAAAA,EAAAA,KAAd,UACE,SAAC,IAAD,CAAgBD,UAAWC,EAAAA,EAAAA,iBAE7B,cAAGD,UAAWC,EAAAA,EAAAA,KAAd,iCACA,cAAGD,UAAWC,EAAAA,EAAAA,KAAd,0DAOR,iCACE,cAAGD,UAAU,kBAAb,UACE,SAAC,IAAD,OAEF,cAAGA,UAAU,kBAAb,iCACA,cAAGA,UAAU,kBAAb,wD,2GC5CN,EAA6B,8BAA7B,EAAwE,8B,SC0FxE,EAtFkB,SAAC,GAA8B,IAAD,IAA3BuC,MAAAA,OAA2B,MAAnB,GAAmB,EAAfC,EAAe,EAAfA,SAC/B,GAAwBpG,EAAAA,EAAAA,UAAS,GAAjC,eAAO8B,EAAP,KAAa6G,EAAb,KACA,GAAsB3I,EAAAA,EAAAA,UAAS,GAA/B,eAAO+B,EAAP,KAAY6G,EAAZ,KAEMC,EAAgB,SAACC,GACb,OAAR1C,QAAQ,IAARA,GAAAA,GAAQ,gBACNtE,KAAAA,EACAC,IAAAA,GACGoE,GACA2C,KAkDP,OACE,UAAC,IAAD,CAAOpB,MAAM,WAAb,WACE,SAAC,IAAD,CACE3B,KAAK,QACLhB,KAAK,SACLhD,IAAK,EACL8F,IAAK,GACL1B,MAAOA,EAAMrE,MAAQA,EACrBsE,SAtDe,SAACC,GACpB,IAAM0C,EAAUC,SAAS3C,EAAEC,OAAOH,OAAS,IAAK,IAE5C8C,OAAOC,MAAMpH,KAIX,SAAUqE,GACdwC,EAAQI,GAIRF,EADEE,EAAU,GACE,CACZjH,KAAM,IAKI,CACZA,KAAMiH,MAoCJnF,UAAWC,KAEb,iBAAMD,UAAWC,EAAjB,mBAEA,SAAC,IAAD,CACEkC,KAAK,QACLhB,KAAK,SACLhD,IAAK,EACL8F,IAAK,GACL1B,MAAOA,EAAMpE,KAAOA,EACpBqE,SA1Cc,SAACC,GACnB,IAAM8C,EAASH,SAAS3C,EAAEC,OAAOH,OAAS,IAAK,IAE3C8C,OAAOC,MAAMnH,KAIX,QAASoE,GACbyC,EAAOO,GAIPN,EADEM,EAAS,GACG,CACZpH,IAAK,IAKK,CACZA,IAAKoH,MAwBHvF,UAAWC,KAEb,iBAAMD,UAAWC,EAAjB,sB,mBCrFN,KAAgB,wBAA0B,gDAAgD,sBAAwB,8CAA8C,sBAAwB,8CAA8C,qBAAuB,6CAA6C,MAAQ,8BAA8B,MAAQ,8BAA8B,WAAa,mCAAmC,iBAAmB,yCAAyC,OAAS,+BAA+B,cAAgB,sCAAsC,YAAc,oCAAoC,WAAa,mCAAmC,gBAAkB,wCAAwC,cAAgB,sCAAsC,WAAa,mCAAmC,QAAU,gCAAgC,eAAiB,uCAAuC,kBAAoB,0CAA0C,KAAO,6BAA6B,YAAc","sources":["webpack://fastdish/./src/Pages/VisualizeRecipeForm/VisualizeRecipeForm.module.scss?a3b8","Pages/VisualizeRecipeForm/VisualizeRecipeForm.jsx","components/PreviewImage/PreviewImage.jsx","webpack://fastdish/./src/components/TimeInput/TimeInput.module.scss?0501","components/TimeInput/TimeInput.jsx","webpack://fastdish/./src/Pages/CreateMealPlan/CreateMealPlan.module.scss?24c8"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"visualize\":\"VisualizeRecipeForm_visualize__8-kTP\",\"visualize__title\":\"VisualizeRecipeForm_visualize__title__XRxtX\",\"visualize__input\":\"VisualizeRecipeForm_visualize__input__V5UV9\",\"visualize__form\":\"VisualizeRecipeForm_visualize__form__iVE2x\",\"servings_input\":\"VisualizeRecipeForm_servings_input__sY4nd\",\"input\":\"VisualizeRecipeForm_input__HStk9\",\"label\":\"VisualizeRecipeForm_label__EjFjS\",\"button\":\"VisualizeRecipeForm_button__al5tM\",\"submit_btn\":\"VisualizeRecipeForm_submit_btn__A-L3K\",\"ingredients_tags\":\"VisualizeRecipeForm_ingredients_tags__ahUd1\",\"upload\":\"VisualizeRecipeForm_upload__3ypkJ\",\"preview__body\":\"VisualizeRecipeForm_preview__body__MLYC4\",\"image__blur\":\"VisualizeRecipeForm_image__blur__TUXsL\",\"icon_close\":\"VisualizeRecipeForm_icon_close__t41GJ\",\"upload__loading\":\"VisualizeRecipeForm_upload__loading__ISnd4\",\"upload__after\":\"VisualizeRecipeForm_upload__after__n8Lva\",\"instruction\":\"VisualizeRecipeForm_instruction__azMw4\",\"instruction__delete\":\"VisualizeRecipeForm_instruction__delete__hmIw0\",\"instruction__step\":\"VisualizeRecipeForm_instruction__step__WlnI0\"};","import { useState } from 'react'\nimport { addDoc, collection } from 'firebase/firestore'\n\nimport {\n  Form,\n  Typography,\n  Input,\n  InputNumber,\n  Space,\n  Row,\n  Col,\n  Button,\n  Upload,\n  message,\n  Tag,\n} from 'antd'\nimport { DeleteOutlined, PlusCircleOutlined } from '@ant-design/icons'\n\nimport { useCreateRecipeCardMutation } from '../../redux/services/recipe'\n\nimport { firestoreDb } from '../../firebase'\n\nimport { useAuth } from '../../hooks/useAuth'\nimport useMediaMatch from '../../hooks/useMediaQuery'\n\nimport { getBase64 } from '../../utils/getBase64'\n\nimport PreviewImage from '../../components/PreviewImage/PreviewImage'\nimport TimeInput from '../../components/TimeInput/TimeInput'\n\nimport cn from 'classnames'\n\nimport style from './VisualizeRecipeForm.module.scss'\n\nconst { Title, Text } = Typography\nconst { Dragger } = Upload\n\nconst VisualizeRecipeForm = () => {\n  const [file, setFile] = useState(null)\n  const [ingredientValue, setIngredientValue] = useState('')\n  const [ingredients, setIngredients] = useState([])\n  const [instructionsValue, setInstructionsValue] = useState('')\n  const [instructions, setInstructions] = useState([])\n  const [image, setImage] = useState(null)\n\n  const isSmallMediaMatch = useMediaMatch('(max-width: 992px)')\n\n  const [form] = Form.useForm()\n  const { userAuth } = useAuth()\n\n  const [createCard, { isLoading }] = useCreateRecipeCardMutation()\n\n  const handleChangeImage = async (event) => {\n    const url = await getBase64(event.file)\n    setFile(url)\n    setImage(event.file)\n  }\n\n  const onFinish = async (info) => {\n    const timeToMin = info.time.hour * 60 + info.time.min\n    const newLineIngredients = ingredients.join(',').replace(/,/g, '\\n')\n    const newLineInstructions = instructions.join(',').replace(/,/g, '\\n')\n\n    const data = new FormData()\n\n    data.append('backgroundImage', 'background2')\n    data.append('mask', 'ellipseMask')\n\n    Object.keys(info).forEach((key) => {\n      data.append(key, info[key])\n      data.set('readyInMinutes', timeToMin)\n      data.set('image', image)\n      data.set('ingredients', newLineIngredients)\n      data.set('instructions', newLineInstructions)\n    })\n\n    message.loading('Loading card')\n\n    const { url } = await createCard(data).unwrap()\n\n    await addDoc(collection(firestoreDb, 'posts'), {\n      title: info.title,\n      url,\n      likes: 0,\n      liked: [],\n      author: {\n        id: userAuth.uid,\n        name: userAuth.displayName,\n        avatar: userAuth.photoURL,\n      },\n    })\n\n    form.resetFields()\n    setIngredients([])\n    setInstructions([])\n    setFile(null)\n\n    message.success('Card created')\n  }\n\n  const handleAddIngredient = () => {\n    if (\n      !!ingredientValue?.trim() &&\n      !ingredients.includes(ingredientValue.trim())\n    ) {\n      setIngredients([...ingredients, ingredientValue])\n      setIngredientValue('')\n      form.resetFields(['ingredients'])\n    }\n  }\n\n  const handleAddInstruction = () => {\n    if (\n      !!instructionsValue?.trim() &&\n      !instructions.includes(instructionsValue.trim())\n    ) {\n      setInstructions([...instructions, instructionsValue])\n      setInstructionsValue('')\n      form.resetFields(['instructions'])\n    }\n  }\n\n  const deleteIngredientsTag = (removedTag) => {\n    const newTags = ingredients.filter((tag) => tag !== removedTag)\n    setIngredients(newTags)\n  }\n\n  const deleteInstruction = (removedInstruction) => {\n    const newInstructions = instructions.filter(\n      (instruction) => instruction !== removedInstruction\n    )\n    setInstructions(newInstructions)\n  }\n\n  return (\n    <div className={style.visualize}>\n      <Title className={style.visualize__title} level={1}>\n        Visualize your recipe:\n      </Title>\n      <Form\n        className={style.visualize__form}\n        layout=\"vertical\"\n        onFinish={onFinish}\n        scrollToFirstError={{\n          behavior: 'smooth',\n          scrollMode: 'always',\n          block: 'center',\n          inline: 'center',\n        }}\n        form={form}\n        initialValues={{\n          time: {\n            hour: 0,\n            min: 0,\n          },\n          servings: 1,\n          fontColor: '#000',\n        }}\n      >\n        <Form.Item\n          name=\"title\"\n          rules={[\n            {\n              required: true,\n              validateTrigger: 'onSubmit',\n              message: 'Please enter a visualize recipe name',\n            },\n            {\n              required: true,\n              message: 'Symbols should not be in the name',\n              pattern: /^[A-Za-z0-9/\\s]*$/,\n            },\n            {\n              required: true,\n              message: 'The name cannot be empty',\n              whitespace: true,\n            },\n          ]}\n          wrapperCol={{\n            span: 24,\n          }}\n        >\n          <Input\n            type=\"text\"\n            className={cn(style.visualize__input, style.input)}\n            placeholder=\"Visualize recipe name\"\n            autoComplete=\"off\"\n          />\n        </Form.Item>\n\n        <Row gutter={16}>\n          <Col xs={24} lg={12}>\n            <Form.Item\n              name=\"ingredients\"\n              label={<span className={style.label}>Ingredients</span>}\n              rules={[\n                {\n                  required: true,\n                  validateTrigger: 'onSubmit',\n                  validator: async () => {\n                    if (!ingredients.length) {\n                      return Promise.reject(\n                        new Error('Please specify the ingredients')\n                      )\n                    }\n                  },\n                },\n                {\n                  validateTrigger: 'onChange',\n                  validator: async () => {\n                    if (ingredients.includes(ingredientValue.trim())) {\n                      return Promise.reject(\n                        new Error('There is already such an ingredient')\n                      )\n                    }\n                  },\n                },\n              ]}\n              wrapperCol={{\n                span: 24,\n              }}\n            >\n              <Input\n                disabled={ingredients.length === 9}\n                placeholder=\"Ingredients\"\n                size=\"large\"\n                className={style.input}\n                autoComplete=\"off\"\n                suffix={<PlusCircleOutlined onClick={handleAddIngredient} />}\n                value={ingredientValue}\n                onChange={(e) => setIngredientValue(e.target.value)}\n              />\n            </Form.Item>\n            <div className={style.ingredients_tags}>\n              <Space wrap>\n                {ingredients.map((item) => (\n                  <Tag\n                    key={item}\n                    closable\n                    onClose={() => deleteIngredientsTag(item)}\n                  >\n                    {item}\n                  </Tag>\n                ))}\n              </Space>\n            </div>\n          </Col>\n\n          <Col xs={24} lg={12}>\n            <Form.Item\n              name=\"instructions\"\n              required\n              label={<span className={style.label}>Instructions</span>}\n              rules={[\n                {\n                  validateTrigger: 'onSubmit',\n                  validator: async () => {\n                    if (!instructions.length) {\n                      return Promise.reject(\n                        new Error('Please specify the instructions')\n                      )\n                    }\n                  },\n                },\n                {\n                  validateTrigger: 'onChange',\n                  validator: async () => {\n                    if (instructions.includes(instructionsValue.trim())) {\n                      return Promise.reject(\n                        new Error('There is already such an instruction')\n                      )\n                    }\n                  },\n                },\n              ]}\n              wrapperCol={{\n                span: 24,\n              }}\n            >\n              <Input.TextArea\n                disabled={instructions.length === 6}\n                showCount\n                className={style.input}\n                maxLength={250}\n                placeholder=\"Specify the instructions\"\n                size=\"large\"\n                autoComplete=\"off\"\n                value={instructionsValue}\n                onChange={(e) => setInstructionsValue(e.target.value)}\n              />\n            </Form.Item>\n            <Row justify=\"end\">\n              <Button\n                disabled={\n                  instructionsValue.length < 1 ||\n                  instructions.length === 6 ||\n                  !instructionsValue.trim()\n                }\n                size={isSmallMediaMatch ? 'middle' : 'small'}\n                className={style.button}\n                onClick={handleAddInstruction}\n              >\n                Add\n              </Button>\n            </Row>\n            {instructions.map((item, index) => (\n              <Text key={item} className={style.instruction}>\n                <span className={style.instruction__step}>\n                  <DeleteOutlined\n                    className={style.instruction__delete}\n                    onClick={() => deleteInstruction(item)}\n                  />\n                  Step {index + 1}:{' '}\n                </span>\n                {item}\n              </Text>\n            ))}\n          </Col>\n        </Row>\n\n        <Row align=\"middle\" justify=\"space-between\" gutter={16}>\n          <Col xs={24} lg={12}>\n            <Form.Item\n              name=\"time\"\n              label={<span className={style.label}>Time for preparing</span>}\n              rules={[\n                {\n                  required: true,\n                  validateTrigger: 'onSubmit',\n                  validator: async (_, value) => {\n                    if (value.hour === 0 && value.min === 0) {\n                      return Promise.reject(\n                        new Error('Specify the correct time')\n                      )\n                    }\n                  },\n                },\n              ]}\n            >\n              <TimeInput />\n            </Form.Item>\n          </Col>\n\n          <Col xs={24} lg={12}>\n            <Form.Item\n              name=\"servings\"\n              label={<span className={style.label}>Servings</span>}\n              rules={[\n                {\n                  required: true,\n                  message: 'Please indicate how many servings',\n                },\n              ]}\n            >\n              <InputNumber\n                className={cn(style.servings_input, style.input)}\n                type=\"number\"\n                size=\"large\"\n                min={1}\n                max={10}\n                placeholder=\"How many servings\"\n                autoComplete=\"off\"\n              />\n            </Form.Item>\n          </Col>\n        </Row>\n\n        <Form.Item\n          name=\"image\"\n          valuePropName=\"filelist\"\n          label={\n            <span className={style.label}>Image of the finished dish</span>\n          }\n          rules={[\n            {\n              required: true,\n              message: 'Please select a image',\n            },\n          ]}\n        >\n          <Dragger\n            name=\"file\"\n            className={cn(style.upload, {\n              [style.upload__after]: file,\n            })}\n            beforeUpload={() => false}\n            showUploadList={false}\n            accept=\".png,.jpeg,.jpg\"\n            onChange={handleChangeImage}\n            disabled={isLoading}\n          >\n            <PreviewImage uploadedImage={file} />\n          </Dragger>\n        </Form.Item>\n\n        <Row gutter={16}>\n          <Col xs={24} lg={12}>\n            <Form.Item\n              name=\"author\"\n              label={<span className={style.label}>Author</span>}\n              rules={[\n                {\n                  required: true,\n                  message: 'Please specify the author',\n                },\n              ]}\n            >\n              <Input\n                placeholder=\"Specify the author\"\n                size=\"large\"\n                autoComplete=\"off\"\n                className={style.input}\n              />\n            </Form.Item>\n          </Col>\n\n          <Col xs={24} lg={12}>\n            <Form.Item\n              name=\"fontColor\"\n              label={<span className={style.label}>Font color</span>}\n            >\n              <Input\n                className={style.input}\n                type=\"color\"\n                placeholder=\"Specify the font color\"\n                size=\"large\"\n                autoComplete=\"off\"\n              />\n            </Form.Item>\n          </Col>\n        </Row>\n\n        <Row justify=\"center\">\n          <Form.Item>\n            <Button\n              type=\"primary\"\n              htmlType=\"submit\"\n              disabled={isLoading}\n              size=\"large\"\n              className={style.submit_btn}\n            >\n              Save\n            </Button>\n          </Form.Item>\n        </Row>\n      </Form>\n    </div>\n  )\n}\n\nexport default VisualizeRecipeForm\n","import { Image, Progress } from 'antd'\nimport { UploadOutlined } from '@ant-design/icons'\n\nimport cn from 'classnames'\n\nimport style from '../../Pages/CreateMealPlan/CreateMealPlan.module.scss'\n\nconst PreviewImage = ({ uploadedImage, isUploadLoading, percentLoading }) => {\n  if (uploadedImage) {\n    return (\n      <div className={style.preview}>\n        <Image\n          className={cn(style.preview__image, {\n            [style.image__blur]: !isUploadLoading,\n          })}\n          preview={false}\n          src={uploadedImage}\n        />\n        {isUploadLoading && (\n          <div className={style.preview__progress}>\n            <Progress\n              type=\"circle\"\n              percent={percentLoading}\n              strokeColor={'#e27d60'}\n            />\n          </div>\n        )}\n        {!isUploadLoading && (\n          <div className={style.preview__body}>\n            <p className={style.text}>\n              <UploadOutlined className={style.icon_upload} />\n            </p>\n            <p className={style.text}>Add photo (upload)</p>\n            <p className={style.text}>Drag photos here or click on the icon</p>\n          </div>\n        )}\n      </div>\n    )\n  }\n  return (\n    <>\n      <p className=\"ant-upload-text\">\n        <UploadOutlined />\n      </p>\n      <p className=\"ant-upload-text\">Add photo (upload)</p>\n      <p className=\"ant-upload-hint\">Drag photos here or click on the icon</p>\n    </>\n  )\n}\n\nexport default PreviewImage\n","// extracted by mini-css-extract-plugin\nexport default {\"input_time\":\"TimeInput_input_time__0Od-C\",\"input_span\":\"TimeInput_input_span__ireST\"};","import { useState } from 'react'\nimport { Input, Space } from 'antd'\n\nimport style from './TimeInput.module.scss'\n\nconst TimeInput = ({ value = {}, onChange }) => {\n  const [hour, setHour] = useState(0)\n  const [min, setMin] = useState(0)\n\n  const triggerChange = (changedValue) => {\n    onChange?.({\n      hour,\n      min,\n      ...value,\n      ...changedValue,\n    })\n  }\n\n  const onHourChange = (e) => {\n    const newHour = parseInt(e.target.value || '0', 10)\n\n    if (Number.isNaN(hour)) {\n      return\n    }\n\n    if (!('hour' in value)) {\n      setHour(newHour)\n    }\n\n    if (newHour > 10) {\n      triggerChange({\n        hour: 10,\n      })\n      return\n    }\n\n    triggerChange({\n      hour: newHour,\n    })\n  }\n\n  const onMinChange = (e) => {\n    const newMin = parseInt(e.target.value || '0', 10)\n\n    if (Number.isNaN(min)) {\n      return\n    }\n\n    if (!('min' in value)) {\n      setMin(newMin)\n    }\n\n    if (newMin > 59) {\n      triggerChange({\n        min: 59,\n      })\n      return\n    }\n\n    triggerChange({\n      min: newMin,\n    })\n  }\n\n  return (\n    <Space align=\"baseline\">\n      <Input\n        size=\"large\"\n        type=\"number\"\n        min={0}\n        max={10}\n        value={value.hour || hour}\n        onChange={onHourChange}\n        className={style.input_time}\n      />\n      <span className={style.input_span}>hour</span>\n\n      <Input\n        size=\"large\"\n        type=\"number\"\n        min={0}\n        max={59}\n        value={value.min || min}\n        onChange={onMinChange}\n        className={style.input_time}\n      />\n      <span className={style.input_span}>min</span>\n    </Space>\n  )\n}\n\nexport default TimeInput\n","// extracted by mini-css-extract-plugin\nexport default {\"createMealPlan__wrapper\":\"CreateMealPlan_createMealPlan__wrapper__aQB5M\",\"createMealPlan__title\":\"CreateMealPlan_createMealPlan__title__8V86X\",\"createMealPlan__input\":\"CreateMealPlan_createMealPlan__input__ludkT\",\"createMealPlan__form\":\"CreateMealPlan_createMealPlan__form__nt0ok\",\"input\":\"CreateMealPlan_input__suwq6\",\"label\":\"CreateMealPlan_label__tkhjo\",\"input_span\":\"CreateMealPlan_input_span__Nq-sZ\",\"upload_container\":\"CreateMealPlan_upload_container__mi-R2\",\"upload\":\"CreateMealPlan_upload__lZUjH\",\"preview__body\":\"CreateMealPlan_preview__body__qOrrv\",\"image__blur\":\"CreateMealPlan_image__blur__FX3sV\",\"icon_close\":\"CreateMealPlan_icon_close__9LF5S\",\"upload__loading\":\"CreateMealPlan_upload__loading__F9NhN\",\"upload__after\":\"CreateMealPlan_upload__after__IvDel\",\"submit_btn\":\"CreateMealPlan_submit_btn__esn8t\",\"preview\":\"CreateMealPlan_preview__YL7MB\",\"preview__image\":\"CreateMealPlan_preview__image__icQCJ\",\"preview__progress\":\"CreateMealPlan_preview__progress__zc3wP\",\"text\":\"CreateMealPlan_text__5JIOQ\",\"icon_upload\":\"CreateMealPlan_icon_upload__EE7Sw\"};"],"names":["Title","Typography","Text","Dragger","Upload","useState","file","setFile","ingredientValue","setIngredientValue","ingredients","setIngredients","instructionsValue","setInstructionsValue","instructions","setInstructions","image","setImage","isSmallMediaMatch","useMediaMatch","Form","form","userAuth","useAuth","useCreateRecipeCardMutation","createCard","isLoading","handleChangeImage","event","getBase64","url","onFinish","info","timeToMin","time","hour","min","newLineIngredients","join","replace","newLineInstructions","data","FormData","append","Object","keys","forEach","key","set","message","unwrap","addDoc","collection","firestoreDb","title","likes","liked","author","id","uid","name","displayName","avatar","photoURL","resetFields","className","style","level","layout","scrollToFirstError","behavior","scrollMode","block","inline","initialValues","servings","fontColor","rules","required","validateTrigger","pattern","whitespace","wrapperCol","span","type","cn","placeholder","autoComplete","gutter","xs","lg","label","validator","length","Promise","reject","Error","includes","trim","disabled","size","suffix","PlusCircleOutlined","onClick","value","onChange","e","target","wrap","map","item","closable","onClose","removedTag","newTags","filter","tag","deleteIngredientsTag","showCount","maxLength","justify","index","DeleteOutlined","removedInstruction","newInstructions","instruction","deleteInstruction","align","_","TimeInput","max","valuePropName","beforeUpload","showUploadList","accept","PreviewImage","uploadedImage","htmlType","isUploadLoading","percentLoading","preview","src","percent","strokeColor","setHour","setMin","triggerChange","changedValue","newHour","parseInt","Number","isNaN","newMin"],"sourceRoot":""}